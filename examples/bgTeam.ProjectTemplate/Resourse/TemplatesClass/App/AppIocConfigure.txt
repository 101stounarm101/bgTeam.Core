namespace $namespace$
{
    using bgTeam;
    using bgTeam.Core;
    using bgTeam.Core.Impl;
    using bgTeam.DataAccess;
    using bgTeam.DataAccess.Impl.Dapper;
    using bgTeam.DataAccess.Impl.MsSql;
    using bgTeam.Impl;
    using bgTeam.Impl.Serilog;
    using kraken.Story;
    using Microsoft.Extensions.DependencyInjection;
    using Microsoft.Extensions.DependencyInjection.Extensions;

    /// <summary>
    /// Configurating IOC.
    /// </summary>
    internal static class AppIocConfigure
    {
        /// <summary>
        /// Configure service collection for application.
        /// </summary>
        public static IServiceCollection Configure()
        {
            var services = new ServiceCollection();
#if !DEBUG
            var config = new AppConfigurationDefault("Production");
#else
            var config = new AppConfigurationDefault("Development");
#endif
            var appSettings = new AppSettings(config);

            services
                .AddSingleton<IAppConfiguration>(config)
                .AddSingleton<IAppSettings>(appSettings)
                .AddSingleton<IAppLoggerConfig, AppLoggerSerilogConfig>()
                .AddSingleton<IAppLogger, AppLoggerSerilog>()
                .AddSingleton<IConnectionSetting>(appSettings)
                .AddSingleton<IConnectionFactory, ConnectionFactoryMsSql>()
                .AddSingleton<IRepository, RepositoryDapper>()
                .AddSingleton<ICrudService, CrudServiceDapper>();

            //Add story
            services.TryAdd(new ServiceDescriptor(typeof(IStoryFactory), typeof(StoryFactory), ServiceLifetime.Transient));
            services.TryAdd(new ServiceDescriptor(typeof(IStoryBuilder), typeof(StoryBuilder), ServiceLifetime.Transient));
            services.Scan(scan => scan
                .FromAssemblyOf<IStoryLibrary>()
                .AddClasses(classes => classes.AssignableTo(typeof(IStory<,>)))
                .AsImplementedInterfaces()
                .WithLifetime(ServiceLifetime.Transient));

            services
                .AddSingleton<Runner>();

            return services;
        }
    }
}