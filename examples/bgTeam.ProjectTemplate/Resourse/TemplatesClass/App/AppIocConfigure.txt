namespace $namespace$
{
    using bgTeam;
    using bgTeam.DataAccess;
    using bgTeam.DataAccess.Impl;
    using bgTeam.Impl;
    using $prj$.DataAccess;
    using $prj$.DataAccess.Impl;
    using $prj$.Story;
    using Microsoft.EntityFrameworkCore;
    using Microsoft.Extensions.Configuration;
    using Microsoft.Extensions.DependencyInjection;
    using Microsoft.Extensions.DependencyInjection.Extensions;
    using Serilog;

    /// <summary>
    /// Configurating IOC.
    /// </summary>
    internal static class AppIocConfigure
    {
        /// <summary>
        /// Configure service collection for application.
        /// </summary>
        public static IServiceCollection Configure()
        {
            var services = new ServiceCollection();
#if !DEBUG
            var env = "Production";
#else
            var env = "Development";
#endif
            var config = new ConfigurationBuilder()
                .AddJsonFile("appsettings.json")
                .AddJsonFile($"appsettings.{env}.json", optional: true)
                .AddEnvironmentVariables()
                .Build();

            services
                .AddSingleton<IConfiguration>(config)
                .AddSingleton<IAppSettings, AppSettings>();

            services.AddLogging(loggingBuilder => loggingBuilder.AddSerilog(dispose: true));

            services
               .AddOptions()
               .AddDbContext<AppDbContext>(
                   options => options
                       .UseLazyLoadingProxies()
                       .UseNpgsql(config.GetConnectionString("MainDb")),
                   ServiceLifetime.Scoped)
               .AddScoped<IEntityFrameworkRepository, EntityFrameworkRepository<AppDbContext>>();

            //Add story
            services.TryAdd(new ServiceDescriptor(typeof(IStoryFactory), typeof(StoryFactory), ServiceLifetime.Transient));
            services.TryAdd(new ServiceDescriptor(typeof(IStoryBuilder), typeof(StoryBuilder), ServiceLifetime.Transient));
            services.Scan(scan => scan
                .FromAssemblyOf<IStoryLibrary>()
                .AddClasses(classes => classes.AssignableTo(typeof(IStory<,>)))
                .AsImplementedInterfaces()
                .WithLifetime(ServiceLifetime.Transient));

            //Add query
            services.TryAdd(new ServiceDescriptor(typeof(IQueryFactory), typeof(QueryFactory), ServiceLifetime.Transient));
            services.TryAdd(new ServiceDescriptor(typeof(IQueryBuilder), typeof(QueryBuilder), ServiceLifetime.Transient));
            services.Scan(scan => scan
                .FromAssemblyOf<IQueryLibrary>()
                .AddClasses(classes => classes.AssignableTo(typeof(IQuery<,>)))
                .AsImplementedInterfaces()
                .WithLifetime(ServiceLifetime.Transient));

            services
                .AddSingleton<Runner>();

            return services;
        }
    }

}