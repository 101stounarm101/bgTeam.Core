namespace $namespace$
{
    using System;
    using System.Diagnostics;
    using System.Threading.Tasks;
    using bgTeam;
    using Microsoft.Extensions.DependencyInjection;

    /// <summary>
    /// Entrypoint class for application.
    /// </summary>
    public static class Program
    {
        private static IAppLogger _logger;

        public static async Task Main(string[] args)
        {
            // var cmdParams = CommandLineHelper.ParseArgs(args);

            var sp = AppIocConfigure.Configure().BuildServiceProvider();

            var runner = sp.GetService<Runner>();
            _logger = sp.GetService<IAppLogger>();

            var process = Process.GetCurrentProcess();
            process.EnableRaisingEvents = true;

            AppDomain.CurrentDomain.ProcessExit += OnExit;
            AppDomain.CurrentDomain.UnhandledException += OnUnhandledException;
            TaskScheduler.UnobservedTaskException += OnUnobservedTaskException;

            await runner.Run();

            process.WaitForExit();

            _logger.Debug("Program is closed!");
        }

        private static void OnUnobservedTaskException(object sender, UnobservedTaskExceptionEventArgs e)
        {
            _logger.Error($"Unobserved task exception: {e.Exception}");
            e.SetObserved();
        }

        private static void OnUnhandledException(object sender, UnhandledExceptionEventArgs e)
        {
            var ex = (Exception)e.ExceptionObject;
            if (e.IsTerminating)
            {
                _logger.Fatal(ex);
            }
            else
            {
                _logger.Error(ex);
            }
        }

        private static void OnExit(object sender, EventArgs e)
        {
            _logger.Error("Program is closed!");
        }
    }
}
