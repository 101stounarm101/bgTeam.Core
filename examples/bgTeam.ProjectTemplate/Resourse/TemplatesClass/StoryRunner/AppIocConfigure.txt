namespace $namespace$
{
    using bgTeam;
    using bgTeam.Extensions;
    using bgTeam.Impl;
    using bgTeam.Impl.Rabbit;
    using bgTeam.Queues;
    using bgTeam.StoryRunner;
    using bgTeam.StoryRunner.Impl;
    using $prj$.Story;
    using Microsoft.Extensions.Configuration;
    using Microsoft.Extensions.DependencyInjection;
    using Microsoft.Extensions.DependencyInjection.Extensions;
    using Serilog;

    /// <summary>
    /// Configurating IOC.
    /// </summary>
    internal static class AppIocConfigure
    {
        /// <summary>
        /// Configure service collection for application.
        /// </summary>
        public static IServiceCollection Configure()
        {
            var services = new ServiceCollection();
#if !DEBUG
            var env = "Production";
#else
            var env = "Development";
#endif
            var config = new ConfigurationBuilder()
                .AddJsonFile("appsettings.json")
                .AddJsonFile($"appsettings.{env}.json", optional: true)
                .AddEnvironmentVariables()
                .Build();

            var queue = config["AppStoryQueue"];
            var threads = ushort.Parse(config["AppThreadCount"]);

            services
                .AddSingleton<IConfiguration>(config)
                .AddSettings<IAppSettings, IQueueProviderSettings, AppSettings>();

            services.AddLogging(loggingBuilder => loggingBuilder.AddSerilog(dispose: true));

            services
                .AddSingleton<IMessageProvider, MessageProviderDefault>()
                .AddSingleton<IQueueProvider>(s =>
                {
                    var mp = s.GetService<IMessageProvider>();
                    var qps = s.GetService<IQueueProviderSettings>();
                    var cf = new ConnectionFactoryRabbitMQ(qps);

                    return new QueueProviderRabbitMQ(mp, cf, true, queue);
                })
                .AddSingleton<IQueueWatcher<IQueueMessage>>(s =>
                {
                    var mp = s.GetService<IMessageProvider>();
                    var qps = s.GetService<IQueueProviderSettings>();
                    var cf = new ConnectionFactoryRabbitMQ(qps);

                    return new QueueConsumerAsyncRabbitMQ(cf, mp, threads);
                })
                .AddSingleton<IStoryProcessorRepository, StoryProcessorRepository>()
                .AddSingleton<IStoryProcessor, StoryProcessor>();

            //Add story
            services.TryAdd(new ServiceDescriptor(typeof(IStoryFactory), typeof(StoryFactory), ServiceLifetime.Transient));
            services.TryAdd(new ServiceDescriptor(typeof(IStoryBuilder), typeof(StoryBuilder), ServiceLifetime.Transient));
            services.Scan(scan => scan
                .FromAssemblyOf<IStoryLibrary>()
                .AddClasses(classes => classes.AssignableTo(typeof(IStory<,>)))
                .AsImplementedInterfaces()
                .WithLifetime(ServiceLifetime.Transient));

            services
                .AddSingleton<Runner>();

            return services;
        }
    }
}