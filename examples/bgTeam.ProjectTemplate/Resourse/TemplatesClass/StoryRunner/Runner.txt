namespace $namespace$
{
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using bgTeam.Queues;
    using bgTeam.Queues.Exceptions;
    using bgTeam.StoryRunner;
    using Microsoft.Extensions.Logging;
    using Newtonsoft.Json;

    internal class Runner
    {
        private readonly ILogger<Runner> _logger;
        private readonly IQueueProvider _queueProvider;
        private readonly IQueueWatcher<IQueueMessage> _queueWatcher;
        private readonly IStoryProcessor _storyProcessor;

        private readonly string _watchQueue;
        private readonly string _errorQueue;

        public Runner(
            ILogger<Runner> logger,
            IQueueProvider queueProvider,
            IQueueWatcher<IQueueMessage> queueWatcher,
            IStoryProcessor storyProcessor,
            IAppSettings settings)
        {
            _logger = logger;
            _queueProvider = queueProvider;
            _queueWatcher = queueWatcher;
            _storyProcessor = storyProcessor;

            _watchQueue = settings.WatchQueue;
            _errorQueue = settings.ErrorQueue;
        }

        public void Run()
        {
            _logger.LogInformation("start");

            _queueWatcher.Error += _queueWatcher_OnError;
            _queueWatcher.Subscribe += QueueProvider_OnSubscribe;
            _queueWatcher.StartWatch(_watchQueue);

            _logger.LogInformation($"connect to queue: {_watchQueue}");
        }

        /// <summary>
        /// Обработка сообщений
        /// </summary>
        protected virtual async Task QueueProvider_OnSubscribe(IQueueMessage message)
        {
            var guid = Guid.NewGuid();

            _logger.LogDebug($"StoryRunner ({guid}) read message - {message.Body}");

            var context = JsonConvert.DeserializeObject<StoryRunnerMessageWork>(message.Body);

            await _storyProcessor.ProcessAsync(context);

            _logger.LogDebug($"StoryRunner ({guid}) - End read message");
        }

        protected virtual void _queueWatcher_OnError(object sender, ExtThreadExceptionEventArgs e)
        {
            var msg = e.Message;

            if (msg.Errors == null)
            {
                msg.Errors = new List<string>();
            }

            msg.Errors.Add(e.Exception.GetBaseException().ToString());

            if (msg.Errors.Count < 3)
            {
                _queueProvider.PushMessage(msg, _watchQueue);
            }
            else
            {
                _queueProvider.PushMessage(msg, _errorQueue);
            }
        }
    }
}