namespace $namespace$
{
    using System.IO;
    using System.Linq;
    using System.Reflection;
    using bgTeam;
    using bgTeam.Core;
    using bgTeam.Core.Helpers;
    using bgTeam.Core.Impl;
    using bgTeam.DataAccess;
    using bgTeam.DataAccess.Impl.Dapper;
    using bgTeam.DataAccess.Impl.PostgreSQL;
    using bgTeam.Impl.Rabbit;
    using bgTeam.Impl.Serilog;
    using bgTeam.Quartz;
    using bgTeam.Queues;
    using bgTeam.Queues.Impl;
    using bgTeam.StoryRunnerScheduler;
    using global::Quartz;
    using global::Quartz.Impl;
    using Microsoft.Extensions.DependencyInjection;

    /// <summary>
    /// Configurating IOC.
    /// </summary>
    internal static class AppIocConfigure
    {
        /// <summary>
        /// Configure service collection for application.
        /// </summary>
        public static IServiceCollection Configure()
        {
            var services = new ServiceCollection();
#if !DEBUG
            var config = new AppConfigurationDefault("Production");
#else
            var config = new AppConfigurationDefault("Development");
#endif
            var fileInfo = new FileInfo(Assembly.GetExecutingAssembly().Location);
            var configFolderPath = Path.Combine(fileInfo.Directory.FullName, "Configurations");
            var configurations = ConfigHelper.Init<JobTriggerInfo>(configFolderPath);
            var queues = configurations.Select(x => x.NameQueue).ToArray();

            var appSettings = new AppSettings(config);

            services
                .AddSingleton<IAppConfiguration>(config)
                .AddSingleton<IAppSettings>(appSettings)
                .AddSingleton<IAppLoggerConfig, AppLoggerSerilogConfig>()
                .AddSingleton<IAppLogger, AppLoggerSerilog>()
                .AddSingleton<ISchedulerFactory, StdSchedulerFactory>()
                .AddSingleton<ISchedulersFactory, JobSchedulersFactory>()
                .AddSingleton<IConnectionSetting>(appSettings)
                .AddSingleton<ISqlDialect, SqlDialectDapper>()
                .AddSingleton<IConnectionFactory, ConnectionFactoryPostgreSQL>()
                .AddSingleton<IRepository, RepositoryDapper>()
                .AddSingleton<IMessageProvider, MessageProviderDefault>()
                .AddSingleton<IQueueProviderSettings>(appSettings)
                .AddSingleton<IQueueProvider>(s =>
                {
                    var logger = s.GetService<IAppLogger>();
                    var mp = s.GetService<IMessageProvider>();
                    var qps = s.GetService<IQueueProviderSettings>();
                    var cs = new ConnectionFactoryRabbitMQ(logger, qps);

                    return new QueueProviderRabbitMQ(logger, mp, cs, true, queues);
                })
                .AddSingleton<ISenderEntity, SenderEntityDefault>();

            services
                .AddSingleton(configurations)
                .AddSingleton<Runner>();

            return services;
        }
    }
}