namespace $namespace$
{
    using System;
    using System.Net;
    using System.Threading.Tasks;
    using $prj$.Common.Exceptions;
    using Microsoft.AspNetCore.Http;
    using Microsoft.Extensions.Logging;
    using Newtonsoft.Json;

    public class AppMiddlewareException
    {
        private readonly ILogger<AppMiddlewareException> _logger;
        private readonly RequestDelegate _next;

        public AppMiddlewareException(RequestDelegate next, ILogger<AppMiddlewareException> logger)
        {
            _next = next;
            _logger = logger;
        }

        public async Task Invoke(HttpContext context)
        {
            try
            {
                await _next(context);
            }
            catch (BadRequestException ex)
            {
                await HandleExceptionAsync(context, ex, HttpStatusCode.BadRequest);
            }
            catch (AggregateException exp)
            {
                await HandleExceptionAsync(context, exp.GetBaseException(), HttpStatusCode.InternalServerError);
            }
            catch (Exception exp)
            {
                await HandleExceptionAsync(context, exp, HttpStatusCode.InternalServerError);
            }
        }

        private static Task HandleExceptionAsync(HttpContext context, Exception exp, HttpStatusCode code)
        {
            var result = JsonConvert.SerializeObject(new
            {
                Code = code,
                exp.Message,
                exp.StackTrace,
            });

            context.Response.ContentType = "application/json";
            context.Response.StatusCode = (int)code;

            return context.Response.WriteAsync(result);
        }
    }
}
